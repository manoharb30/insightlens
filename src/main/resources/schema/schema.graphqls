# Defines the scalar type for handling file uploads
scalar Upload

# Defines the structure for returning Document information
type Document {
    id: ID!
    filename: String
    originalFilename: String
    fileType: String
    fileSize: Float # Changed from Long to Float (Standard GraphQL type)
    status: String # Consider defining a GraphQL Enum for DocumentStatus later
    uploadDate: String # Consider using a standard DateTime scalar if needed
    domainType: String
    # Add any other fields from your Document entity you want to expose
}

# Defines the structure for returning Document Comparison results
type DocumentComparison {
    id: ID!
    """ The first document in the comparison (e.g., older version). """
    documentA: Document # Link back to the Document type
    """ The second document in the comparison (e.g., newer version). """
    documentB: Document # Link back to the Document type
    """ A summary of the differences found between the documents, generated by AI. """
    diffSummary: String
}

# Define the Query type
type Query {
    """
    Retrieves documents filtered by their processing status.
    """
    documentsByStatus(status: String!): [Document]
    
    """
    Retrieves a single document by its ID.
    """
    getDocumentById(id: ID!): Document
    
    """
    Retrieves all documents.
    """
    getAllDocuments: [Document]
    
    """
    Retrieves a comparison by its ID.
    """
    getComparisonById(id: ID!): DocumentComparison
}

# Defines the available mutations
type Mutation {
    """
    Uploads a single document for processing.
    Triggers asynchronous processing (text extraction, chunking, embedding).
    Returns basic document metadata immediately.
    """
    uploadDocument(file: Upload!): Document

    """
    Compares two previously uploaded and processed documents.
    Triggers the comparison logic using embeddings and LLM analysis.
    Returns the comparison result including a summary of differences.
    Requires documents to be in 'PROCESSED' status with embeddings generated.
    """
    compareDocuments(docIdA: ID!, docIdB: ID!): DocumentComparison
}

# Optional: Define Queries later if needed
# type Query {
#   getDocumentById(id: ID!): Document
#   getAllDocuments: [Document]
#   getComparisonById(id: ID!): DocumentComparison
# }

